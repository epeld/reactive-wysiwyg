
Websocket needs to return a WS-resource per URL-request.
Needs to return the same resource on consequent requests to same URL
 but the resources should be created on-the-fly (and torn down when unused)

1, 2, 3, 4, (5 kind of), 6 done   
   
   
We want an actions-mechanism.

1. Done

2. Ignored

3. Done

4. Components have been implemented
   

We want to be able to:
- style components individually

- publish components

- inspect component data, e.g by providing links in debug mode

- edit/update component data using e.g http POST

- trigger actions from the server

- open up an action timeline (maintain log of all performed actions + initial state!)

- trigger actions from a menu? in debug mode (not THAT important I guess..)

- devise a schema for where data ends up e.g where do we store the action log?
transitive state? etc
  

THOUGHT:
- Identify ALL resources using a uuid (including state, component, actions etc).
This allows to edit e.g state on different pages as well as cross referencing
and all sorts of stuff..


- Seems like we are moving towards a layered approach to state:
we have e.g application state (data) but we also have appliation meta data
such as:
- Debug mode yes/no
- uuid of state object?
- Action timeline + initial state + current 'time position' wrt time line


-----------------------

in the long run we probably also want to move away from alists and towards classes